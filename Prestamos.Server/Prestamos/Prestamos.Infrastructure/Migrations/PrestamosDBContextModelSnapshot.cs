// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Prestamos.Infrastructure.DbContexts;

namespace Prestamos.Infrastructure.Migrations
{
    [DbContext(typeof(PrestamosDBContext))]
    partial class PrestamosDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Prestamos.Core.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("character varying(11)");

                    b.Property<DateTimeOffset?>("FechaActualizado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FechaCreado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdDireccion")
                        .HasColumnType("integer");

                    b.Property<int>("IdEstatusCrediticio")
                        .HasColumnType("integer");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("Cedula")
                        .IsUnique();

                    b.HasIndex("IdDireccion");

                    b.HasIndex("IdEstatusCrediticio");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.DetallePrestamo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("CapitalAmortizado")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CapitalPendiente")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CuotaPagar")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTimeOffset>("FechaPago")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdEstatusPrestamo")
                        .HasColumnType("integer");

                    b.Property<int>("IdPrestamo")
                        .HasColumnType("integer");

                    b.Property<decimal>("InteresPagar")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("NumeroCuota")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Pagado")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstatusPrestamo");

                    b.HasIndex("IdPrestamo");

                    b.ToTable("DetallePrestamos");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Direccion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calle = "Desconocida",
                            Numero = "13",
                            Provincia = "Santo Domingo"
                        },
                        new
                        {
                            Id = 2,
                            Calle = "Desconocida",
                            Numero = "14",
                            Provincia = "Santo Domingo 2"
                        },
                        new
                        {
                            Id = 3,
                            Calle = "Desconocida",
                            Numero = "15",
                            Provincia = "Santo Domingo 3"
                        },
                        new
                        {
                            Id = 4,
                            Calle = "Desconocida",
                            Numero = "16",
                            Provincia = "Santo Domingo 4"
                        });
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("FechaActualizado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FechaCreado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("IdAdministrador")
                        .HasColumnType("integer");

                    b.Property<int?>("IdDireccion")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Rnc")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("RNC");

                    b.Property<string>("Telefono")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("IdAdministrador");

                    b.HasIndex("IdDireccion");

                    b.ToTable("Empresa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "prueba@gmail.com",
                            FechaActualizado = new DateTimeOffset(new DateTime(2022, 1, 4, 13, 45, 43, 133, DateTimeKind.Unspecified).AddTicks(1420), new TimeSpan(0, 0, 0, 0, 0)),
                            FechaCreado = new DateTimeOffset(new DateTime(2022, 1, 4, 13, 45, 43, 133, DateTimeKind.Unspecified).AddTicks(1092), new TimeSpan(0, 0, 0, 0, 0)),
                            IdAdministrador = 1,
                            IdDireccion = 3,
                            Nombre = "Prueba",
                            Rnc = "875223236",
                            Telefono = "5556232365"
                        });
                });

            modelBuilder.Entity("Prestamos.Core.Entities.EstatusCrediticio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EstatusCrediticios")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EstatusCrediticio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EstatusCrediticios = 1
                        },
                        new
                        {
                            Id = 2,
                            EstatusCrediticios = 2
                        },
                        new
                        {
                            Id = 3,
                            EstatusCrediticios = 3
                        },
                        new
                        {
                            Id = 4,
                            EstatusCrediticios = 4
                        });
                });

            modelBuilder.Entity("Prestamos.Core.Entities.EstatusPrestamo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EstatusPrestamos")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EstatusPrestamos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EstatusPrestamos = 1
                        },
                        new
                        {
                            Id = 2,
                            EstatusPrestamos = 2
                        },
                        new
                        {
                            Id = 3,
                            EstatusPrestamos = 3
                        },
                        new
                        {
                            Id = 4,
                            EstatusPrestamos = 4
                        });
                });

            modelBuilder.Entity("Prestamos.Core.Entities.PeriodoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PeriodoDePagos")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PeriodoPago");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PeriodoDePagos = 1
                        },
                        new
                        {
                            Id = 2,
                            PeriodoDePagos = 2
                        },
                        new
                        {
                            Id = 3,
                            PeriodoDePagos = 3
                        },
                        new
                        {
                            Id = 4,
                            PeriodoDePagos = 4
                        },
                        new
                        {
                            Id = 5,
                            PeriodoDePagos = 5
                        });
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Prestamo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Capital")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Cuotas")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("FechaCreado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("FechaCulminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdCliente")
                        .HasColumnType("integer");

                    b.Property<int>("IdEstatusPrestamo")
                        .HasColumnType("integer");

                    b.Property<int>("IdPeriodoPago")
                        .HasColumnType("integer");

                    b.Property<int>("IdUsuarioUtorizador")
                        .HasColumnType("integer");

                    b.Property<decimal>("Interes")
                        .HasColumnType("numeric(5,3)");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdEstatusPrestamo");

                    b.HasIndex("IdPeriodoPago");

                    b.HasIndex("IdUsuarioUtorizador");

                    b.ToTable("Prestamos");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Roles = 1
                        },
                        new
                        {
                            Id = 2,
                            Roles = 2
                        },
                        new
                        {
                            Id = 3,
                            Roles = 3
                        });
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTimeOffset?>("FechaActualizado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FechaCreado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdDireccion")
                        .HasColumnType("integer");

                    b.Property<int>("IdRol")
                        .HasColumnType("integer");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("IdDireccion");

                    b.HasIndex("IdRol");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Apellidos = "Admin",
                            Cedula = "10015221545",
                            Email = "admin@gmail.com",
                            FechaActualizado = new DateTimeOffset(new DateTime(2022, 1, 4, 13, 45, 43, 132, DateTimeKind.Unspecified).AddTicks(6407), new TimeSpan(0, 0, 0, 0, 0)),
                            FechaCreado = new DateTimeOffset(new DateTime(2022, 1, 4, 13, 45, 43, 132, DateTimeKind.Unspecified).AddTicks(5963), new TimeSpan(0, 0, 0, 0, 0)),
                            IdDireccion = 4,
                            IdRol = 1,
                            Nombres = "Super",
                            Password = "15e2b0d3c33891ebb0f1ef609ec419420c20e320ce94c65fbc8c3312448eb225",
                            Telefono = "8294551565"
                        },
                        new
                        {
                            Id = 1,
                            Apellidos = "Santana",
                            Cedula = "17895222545",
                            Email = "erinxon@gmail.com",
                            FechaActualizado = new DateTimeOffset(new DateTime(2022, 1, 4, 13, 45, 43, 132, DateTimeKind.Unspecified).AddTicks(7085), new TimeSpan(0, 0, 0, 0, 0)),
                            FechaCreado = new DateTimeOffset(new DateTime(2022, 1, 4, 13, 45, 43, 132, DateTimeKind.Unspecified).AddTicks(7081), new TimeSpan(0, 0, 0, 0, 0)),
                            IdDireccion = 1,
                            IdRol = 2,
                            Nombres = "Erinxon",
                            Password = "15e2b0d3c33891ebb0f1ef609ec419420c20e320ce94c65fbc8c3312448eb225",
                            Telefono = "8294155565"
                        },
                        new
                        {
                            Id = 2,
                            Apellidos = "Prueba prueba2",
                            Cedula = "17495221545",
                            Email = "prueba2@gmail.com",
                            FechaActualizado = new DateTimeOffset(new DateTime(2022, 1, 4, 13, 45, 43, 132, DateTimeKind.Unspecified).AddTicks(7166), new TimeSpan(0, 0, 0, 0, 0)),
                            FechaCreado = new DateTimeOffset(new DateTime(2022, 1, 4, 13, 45, 43, 132, DateTimeKind.Unspecified).AddTicks(7164), new TimeSpan(0, 0, 0, 0, 0)),
                            IdDireccion = 2,
                            IdRol = 3,
                            Nombres = "Prueba prueba2",
                            Password = "15e2b0d3c33891ebb0f1ef609ec419420c20e320ce94c65fbc8c3312448eb225",
                            Telefono = "8294555565"
                        });
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Cliente", b =>
                {
                    b.HasOne("Prestamos.Core.Entities.Direccion", "Direccion")
                        .WithMany("Clientes")
                        .HasForeignKey("IdDireccion")
                        .HasConstraintName("FK__Clientes__IdDire__398D8EEE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prestamos.Core.Entities.EstatusCrediticio", "EstatusCrediticio")
                        .WithMany("Clientes")
                        .HasForeignKey("IdEstatusCrediticio")
                        .HasConstraintName("FK__Clientes__IdEsta__3B75D760")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direccion");

                    b.Navigation("EstatusCrediticio");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.DetallePrestamo", b =>
                {
                    b.HasOne("Prestamos.Core.Entities.EstatusPrestamo", "EstatusPrestamo")
                        .WithMany("DetallePrestamos")
                        .HasForeignKey("IdEstatusPrestamo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prestamos.Core.Entities.Prestamo", "Prestamo")
                        .WithMany("DetallePrestamos")
                        .HasForeignKey("IdPrestamo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstatusPrestamo");

                    b.Navigation("Prestamo");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Empresa", b =>
                {
                    b.HasOne("Prestamos.Core.Entities.Usuario", "Administrador")
                        .WithMany("Empresas")
                        .HasForeignKey("IdAdministrador")
                        .HasConstraintName("FK__Empresa__IdAdmin__36B12243");

                    b.HasOne("Prestamos.Core.Entities.Direccion", "Direccion")
                        .WithMany("Empresas")
                        .HasForeignKey("IdDireccion")
                        .HasConstraintName("FK__Empresa__IdDirec__35BCFE0A");

                    b.Navigation("Administrador");

                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Prestamo", b =>
                {
                    b.HasOne("Prestamos.Core.Entities.Cliente", "Cliente")
                        .WithMany("Prestamos")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prestamos.Core.Entities.EstatusPrestamo", "EstatusPrestamo")
                        .WithMany("Prestamos")
                        .HasForeignKey("IdEstatusPrestamo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prestamos.Core.Entities.PeriodoPago", "PeriodoPago")
                        .WithMany("Prestamos")
                        .HasForeignKey("IdPeriodoPago")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prestamos.Core.Entities.Usuario", "UsuarioUtorizador")
                        .WithMany("Prestamos")
                        .HasForeignKey("IdUsuarioUtorizador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("EstatusPrestamo");

                    b.Navigation("PeriodoPago");

                    b.Navigation("UsuarioUtorizador");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Usuario", b =>
                {
                    b.HasOne("Prestamos.Core.Entities.Direccion", "Direccion")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdDireccion")
                        .HasConstraintName("FK__Usuarios__IdDire__30F848ED")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prestamos.Core.Entities.Role", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK__Usuarios__IdRol__32E0915F")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direccion");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Cliente", b =>
                {
                    b.Navigation("Prestamos");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Direccion", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Empresas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.EstatusCrediticio", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.EstatusPrestamo", b =>
                {
                    b.Navigation("DetallePrestamos");

                    b.Navigation("Prestamos");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.PeriodoPago", b =>
                {
                    b.Navigation("Prestamos");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Prestamo", b =>
                {
                    b.Navigation("DetallePrestamos");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Role", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Prestamos.Core.Entities.Usuario", b =>
                {
                    b.Navigation("Empresas");

                    b.Navigation("Prestamos");
                });
#pragma warning restore 612, 618
        }
    }
}
